<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>素数计算</title>
      <link href="/2018/09/21/C_%E8%AE%A1%E7%AE%97%E7%B4%A0%E6%95%B0/"/>
      <url>/2018/09/21/C_%E8%AE%A1%E7%AE%97%E7%B4%A0%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-打印100-200之间的素数"><a href="#1-打印100-200之间的素数" class="headerlink" title="1.打印100~200之间的素数"></a>1.打印100~200之间的素数</h2><blockquote><p> 素数：当一个数的因子只有1和它本身的时候就是素数。特殊也是最小的质数是2。</p></blockquote><a id="more"></a><blockquote><p>分析 ：一般的，拿一个数n(n!=2)除以2，除以3，直达除到n-1，若可以整除，说明n为质数,反之非质数</p><p>当然，也不是一点得除到n-1，其实到n/2都可以了。</p><p>甚至，其实到根号n都可以了。</p><p>还有，除了2偶数都不可能是质数，那直接把偶数排除掉 for(i = 3;i&lt;n/2;i+=2)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//求100-200之间的素数；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt;= <span class="number">200</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (IsPrime(i))&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d "</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsPrime</span><span class="params">(<span class="keyword">int</span> n)</span>  <span class="comment">//判断一个数是否为素数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (n%i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> <a href="https://blog.csdn.net/PriestessofBirth/article/details/79435124" target="_blank" rel="noopener">作为参考</a>,等到后面研究算法的时候可能有更加优化的方案！</p></blockquote><h2 id="2-输出乘法口诀表"><a href="#2-输出乘法口诀表" class="headerlink" title="2.输出乘法口诀表"></a>2.输出乘法口诀表</h2><blockquote><p> 用一对嵌套for循环可以轻易实现，注意格式化打印</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//打印乘法口诀表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span> ; j&lt;= i ; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d*%d=%d\t"</span>,j,i,i*j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<img src="/2018/09/21/C_计算素数/乘法口诀表.png" title="乘法口诀表"></p><h2 id="3-判断1000-2000年之间的闰年"><a href="#3-判断1000-2000年之间的闰年" class="headerlink" title="3.判断1000~2000年之间的闰年"></a>3.判断1000~2000年之间的闰年</h2><blockquote><p> 闰年判断条件：四年一闰，一百年不闰。四百年又一闰。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//判断1000年---2000年之间的闰年</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1000</span>; i &lt;= <span class="number">2000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (IsLeapYear(i))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"闰年有%d个\n"</span>,count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsLeapYear</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>) || (year % <span class="number">400</span> == <span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2018/09/21/C_计算素数/判断闰年.png" title="判断闰年">]]></content>
      
      
      <categories>
          
          <category> lang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>先定一个小目标~</title>
      <link href="/2018/09/21/%E5%85%88%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9B%AE%E6%A0%87~/"/>
      <url>/2018/09/21/%E5%85%88%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%9B%AE%E6%A0%87~/</url>
      
        <content type="html"><![CDATA[<p>先做一个自我介绍，我叫史腾飞，好就这样！<br>大三了，大学时间已经过半了，不是感叹时间过得太快了，但是我也不能掉队呀！</p><ul><li>学习编程，代码量尤为重要。所以我可以保证我每天三个小时以上的coding时间。</li><li>学习，就要做好笔记，以便于回顾。这也是写博客的主要目的。</li><li>杜绝眼高手低。</li><li>我会定期制定我的学习计划。</li></ul><blockquote><p>做你不想做的事，你会发现也不过如此！</p><p>加油！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flags </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+GitHub打造个人博客</title>
      <link href="/2018/09/17/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/09/17/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>1.安装nodejs<br>去官网下载nodejs安装(推荐安装4.x),安装之后在命令行 node -v,如果成功说明node环境ok,不成功就去环境变量配置一下.<br>2.安装hexo<br>使用命令 npm install hexo -g,执行hexo -v 查看版本,本教程适合3.1.1以上版本<br>3.安装git<br><a id="more"></a><br>去官网下载git安装<br>4.配置git<br>配置ssh私钥,上传到github上</p><h2 id="2-github-pages的说明"><a href="#2-github-pages的说明" class="headerlink" title="2.github-pages的说明"></a>2.github-pages的说明</h2><ul><li>github有两种主页,一种是github-page(个人主页),一种是项目主页,本教程针对个人主页</li><li>github-page需要将hexo博客发布到repository的master(主干)即可</li><li>github的个人主页要求repository的名称和username一致，加入username是tom，则repository的名称为tom.github.io<h2 id="3-使用hexo写博客"><a href="#3-使用hexo写博客" class="headerlink" title="3.使用hexo写博客"></a>3.使用hexo写博客</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- 新建一个文件夹myblog,</span><br><span class="line">- 右键git bash here使用git的shell</span><br><span class="line">- 在shell中输入hexo init,回车执行</span><br><span class="line">- 在shell中输入hexo g ,回车</span><br><span class="line">- 在shell中hexo s,回车</span><br><span class="line">- 去浏览器访问http://localhost:4000,访问到主页,然后在shell中ctrl c停止</span><br><span class="line">- 在shell中hexo new &quot;first-blog&quot;,回车</span><br><span class="line">- 在shell中hexo g ,回车</span><br><span class="line">- 在shell中hexo s ,回车,在访问</span><br><span class="line">- ok,在本地测试就没问题了</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-发布到github"><a href="#4-发布到github" class="headerlink" title="4.发布到github"></a>4.发布到github</h2><p>打开项目根部录下的.config.yml,找到deploy,修改如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> - type: git</span><br><span class="line">   repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">     branch: branch</span><br><span class="line">  message: message</span><br></pre></td></tr></table></figure></p><h2 id="5-常用命令"><a href="#5-常用命令" class="headerlink" title="5.常用命令"></a>5.常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line">hexo clean  删除public文件夹</span><br></pre></td></tr></table></figure><h2 id="6-常见问题"><a href="#6-常见问题" class="headerlink" title="6.常见问题"></a>6.常见问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">发布不上去：</span><br><span class="line">npm install hexo-deployer-git --save 安装依赖包</span><br></pre></td></tr></table></figure><h2 id="7-具体设置"><a href="#7-具体设置" class="headerlink" title="7.具体设置"></a>7.具体设置</h2><p>hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的；</p><ul><li>修改主题</li></ul><p>修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。<br>如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。</p><p>全局的_config.yml这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。<br>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><p>本文参考了博客：<a href="https://geeksblog.cc/hexo-githup-blog.html" target="_blank" rel="noopener">参考博客</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程和并发--基础操作</title>
      <link href="/2018/09/17/%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%B9%B6%E5%8F%91--%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/09/17/%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%B9%B6%E5%8F%91--%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>并发和并行</strong>是即相似又有区别：</p><ul><li>并行：指两个或多个事件在同一时刻发生；</li><li>并发：指两个或多个事件在同一时间段内发生。<a id="more"></a><strong>进程</strong>是指一个内存中运行中的应用程序。每个进程都有自己独立的一块内存空间，一个应用程序可以同时启动多个进程。比如在Windows系统中，一个运行的abc.exe就是一个进程。<br>那么我们此时就可以处理同时玩游戏和听音乐的问题了，我们可以设计成两个程序，一个专门负责玩游戏，一个专门负责听音乐。<br>但是问题来了，要是要设计一个植物大战僵尸游戏，我得开N个进程才能完成多个功能，这样的设计显然是不合理的。<br>更何况大多数操作系统都不需要一个进程访问其他进程的内存空间，也就是说进程之间的通信很不方便。<br>此时我们得引入“线程”这门技术，来解决这个问题。</li></ul><p><strong>线程</strong>是指进程中的一个执行任务(控制单元)，一个进程可以同时并发运行多个线程，如：多线程下载软件。<br>一个进程至少有一个线程，为了提高效率，可以在一个进程中开启多个执行任务,即多线程。<br>多进程：操作系统中同时运行的多个程序。<br>多线程：在同一个进程中同时运行的多个任务。<br>我们查看Windows环境下的任务管理器：<br>  在操作系统中允许多个任务，每一个任务就是一个进程，每一个进程也可以同时执行多个任务，每一个任务就是线程。</p><p><strong>多线程</strong>作为一种多任务、并发的工作方式，当然有其存在优势：</p><ul><li>进程之前不能共享内存，而线程之间共享内存(堆内存)则很简单。</li><li>系统创建进程时需要为该进程重新分配系统资源,创建线程则代价小很多,因此实现多任务并发时,多线程效率更高.</li><li>Java语言本身内置多线程功能的支持,而不是单纯第作为底层系统的调度方式,从而简化了多线程编程.</li></ul><h2 id="用java语言创建进程"><a href="#用java语言创建进程" class="headerlink" title="用java语言创建进程"></a>用java语言创建进程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line">//如何用java语言开启一个进程</span><br><span class="line">public class ProcessDemo &#123;</span><br><span class="line">public static void main(String[] args) throws IOException&#123;</span><br><span class="line">//方式一：使用Runtime的exec方法</span><br><span class="line">Runtime.getRuntime().exec(&quot;notepad&quot;);</span><br><span class="line">//方式二：使用ProcessBuilder类中的start方法</span><br><span class="line">ProcessBuilder pb = new ProcessBuilder(&quot;notepad&quot;);</span><br><span class="line">pb.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建和启动线程"><a href="#创建和启动线程" class="headerlink" title="创建和启动线程"></a>创建和启动线程</h2><h3 id="方式一：继承Thread类"><a href="#方式一：继承Thread类" class="headerlink" title="方式一：继承Thread类"></a>方式一：继承Thread类</h3><ol><li>自定义类继承于Thread类，那么该自定义类就是线程类；</li></ol><p>2．覆写run方法，将线程运行的代码存放在run中；</p><p>3．创建自定义类的对象，即线程对象；</p><p>4．调用线程对象的start方法，启动线程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package thread_create;</span><br><span class="line">//继承方式 创建和启动线程</span><br><span class="line">class MusicThread extends Thread&#123;      //MusicThread是线程子类</span><br><span class="line">public void run() &#123;               //子类必须重写run()方法</span><br><span class="line">for(int i = 0 ;i &lt; 50;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;听音乐&quot;+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class ExtendsThreadDemo &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">for(int i = 0 ;i &lt; 50;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;玩游戏&quot;+i);</span><br><span class="line">if( i == 10)&#123;</span><br><span class="line">MusicThread t = new MusicThread();  //创建线程子类的实例</span><br><span class="line">t.start(); //底层也调用了run();  启动线程</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式二：实现Runnable接口"><a href="#方式二：实现Runnable接口" class="headerlink" title="方式二：实现Runnable接口"></a>方式二：实现Runnable接口</h3><p>1．自定义类实现Runnable接口；</p><p>2．覆写run方法，线程运行的代码存放在run中；</p><p>3．通过Thread类创建线程对象，并将实现了Runnable接口的实现类对象作为参数传递给Thread类的构造器。</p><p>4．Thread类对象调用start方法，启动线程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class MusicRunnable implements java.lang.Runnable&#123;         //注意MusicRunnable类不是线程类或者线程子类</span><br><span class="line">public void run() &#123;   //接口的实现必须覆盖方法。</span><br><span class="line">for(int i = 0 ;i &lt; 50;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;听音乐&quot;+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class ImplementsRunnableDemo &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">for(int i = 0 ;i &lt; 50;i++)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;玩游戏&quot;+i);</span><br><span class="line">if( i == 10)&#123;</span><br><span class="line">Runnable t = new MusicRunnable();        //启动线程必须用线程类对象调用start();</span><br><span class="line">new Thread(t).start();             //类Thread的一个构造器中Thread(Runnable target)分配新的 Thread 对象。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对比两种方法（吃苹果比赛）"><a href="#对比两种方法（吃苹果比赛）" class="headerlink" title="对比两种方法（吃苹果比赛）"></a>对比两种方法（吃苹果比赛）</h3><p><strong>1、继承Thread类</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 案例:存在50个苹果,现在有请三个童鞋(小A,小B,小C)上台表演吃苹果.</span><br><span class="line"> * 因为A,B,C三个人可以同时吃苹果,此时得使用多线程技术来实现这个案例.</span><br><span class="line"> *</span><br><span class="line"> *       此处程序不合理,ABC每个线程都执行50次,即ABC每个人都吃一次编号50的苹果</span><br><span class="line"> */</span><br><span class="line">class Person extends Thread&#123;</span><br><span class="line">private  int num= 50;</span><br><span class="line">Person(String name)&#123;</span><br><span class="line">super(name);</span><br><span class="line">&#125;</span><br><span class="line">public void run() &#123;</span><br><span class="line">for(int i = 0;i &lt; 50;i++)&#123;</span><br><span class="line">if(num &gt; 0)</span><br><span class="line">System.out.println(super.getName()+&quot;吃了第&quot;+num--+&quot;个苹果&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//使用继承Thread的方式创建线程</span><br><span class="line">public class ExtendsDemo &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Person p1 = new Person(&quot;A&quot;);</span><br><span class="line">p1.start();</span><br><span class="line">Person p2 = new Person(&quot;B&quot;);</span><br><span class="line">p2.start();</span><br><span class="line">Person p3 = new Person(&quot;C&quot;);</span><br><span class="line">p3.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、实现Runnable接口</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Apple implements Runnable&#123;</span><br><span class="line">private int num = 50;</span><br><span class="line">public void run()&#123;</span><br><span class="line">for(int i = 0; i&lt; 50 ;i++)&#123;</span><br><span class="line">if(num &gt; 0)&#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName()+&quot;吃了第&quot;+num--+&quot;个苹果&quot;);</span><br><span class="line">&#125;//Thread.currentThread()   返回对当前正在执行的线程对象的引用。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//使用实现Runnable接口的方式，这种方法可以解决此问题</span><br><span class="line">public class ImplementsDemo &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">Runnable r = new Apple();</span><br><span class="line">new Thread(r,&quot;A&quot;).start();</span><br><span class="line">new Thread(r,&quot;B&quot;).start();</span><br><span class="line">new Thread(r,&quot;C&quot;).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对比</strong></p><p>继承方式：</p><ul><li>java中类是单继承的，如果继承了Thread，该类就不能再有其他的直接父类</li><li>从操作上分析，继承方式更简单，获取线程的名字也简单（操作上，简单）</li><li>从多线程共享一个资源上分析，<strong>继承方式不能做到</strong></li></ul><p>实现方式</p><ul><li>java中类可以实现接口，此时该类还可以继承其他类，并且可以实现接口（设计上，更优雅）</li><li>从操作上分析，实现方式稍微复杂点，获取线程的名字比较复杂，得使用currentThread()获取当前线程的引用。</li><li>从多线程共享一个资源上分析，<strong>实现方式可以做到</strong>。</li></ul>]]></content>
      
      
      
    </entry>
    
  
  
</search>
